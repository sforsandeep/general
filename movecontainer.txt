using Azure.Storage.Blobs;
using System;

public async Task<bool> MoveBlobBetweenContainersAsync(string sourceFilePath, string destinationPath, string fileName)
{
    string sourceContainer = sourceFilePath.Split('/')[0];
    string sourceBlobSubPath = sourceFilePath.Substring(sourceContainer.Length + 1);

    string destinationContainer = destinationPath.Split('/')[0];
    string destinationBlobSubPath = destinationPath.Substring(destinationContainer.Length + 1) + "/" + fileName;

    BlobClient sourceBlobClient = new BlobClient(new Uri($"https://{accountName}.blob.core.windows.net/{sourceContainer}/{sourceBlobSubPath}"), new DefaultAzureCredential());
    BlobClient destinationBlobClient = new BlobClient(new Uri($"https://{accountName}.blob.core.windows.net/{destinationContainer}/{destinationBlobSubPath}"), new DefaultAzureCredential());

    // Check if the source exists
    if (!await sourceBlobClient.ExistsAsync())
    {
        Console.WriteLine($"Source blob '{sourceFilePath}' does not exist.");
        return false;
    }

    // Start the server-side copy
    await destinationBlobClient.StartCopyFromUriAsync(sourceBlobClient.Uri);

    // Confirm the copy (in a production scenario, you may want to poll and ensure that the copy has completed successfully)
    await Task.Delay(TimeSpan.FromSeconds(10)); // You might need a more robust way of checking the copy status than just a delay.

    // Verify the destination blob exists
    if (!await destinationBlobClient.ExistsAsync())
    {
        Console.WriteLine($"Failed to copy the blob to '{destinationPath}/{fileName}'.");
        return false;
    }

    // Once the copy is successful and verified, delete the original
    await sourceBlobClient.DeleteIfExistsAsync();

    Console.WriteLine($"Moved blob from '{sourceFilePath}' to '{destinationPath}/{fileName}'.");
    return true;
}
